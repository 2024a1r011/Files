#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
} node;

node *head = NULL;

node *createnode(int ele) {
    node *newnode = (node *)malloc(sizeof(node));
    newnode->data = ele;
    newnode->next = NULL;
    return newnode;
}

void insertnodeinbeg(int ele) {
    node *newnode = createnode(ele);
    newnode->next = head;
    head = newnode;
    printf("Node inserted at beginning!\n");
}

void insertnodeatend(int ele) {
    node *newnode = createnode(ele);
    if (head == NULL) {
        head = newnode;
    } else {
        node *temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
    printf("Node inserted at the end!\n");
}

void deletenodefrombeg() {
    if (head == NULL) {
        printf("List is empty!\n");
    } else {
        node *temp = head;
        head = temp->next;
        free(temp);
        printf("Node deleted from beginning!\n");
    }
}

void deletenodefromend() {
    if (head == NULL) {
        printf("List is empty!\n");
    } else if (head->next == NULL) {  // Only one element in the list
        free(head);
        head = NULL;
        printf("Node deleted from end!\n");
    } else {
        node *temp = head;
        while (temp->next && temp->next->next) {
            temp = temp->next;
        }
        free(temp->next);
        temp->next = NULL;
        printf("Node deleted from end!\n");
    }
}

void deletenodefromanypos(int pos) {
    if (head == NULL) {
        printf("List is empty!\n");
    } else if (pos == 1) {
        deletenodefrombeg();
    } else {
        node *temp = head;
        int i = 1;
        while (temp != NULL && i < pos - 1) {
            temp = temp->next;
            i++;
        }
        if (temp == NULL || temp->next == NULL) {
            printf("Position out of range!\n");
        } else {
            node *t = temp->next;
            temp->next = temp->next->next;
            free(t);
            printf("Node deleted from position %d!\n", pos);
        }
    }
}

void search(int target) {
    node *temp = head;
    int pos = 1;
    while (temp != NULL) {
        if (temp->data == target) {
            printf("Element found at position %d\n", pos);
            return;
        }
        temp = temp->next;
        pos++;
    }
    printf("Element not found!\n");
}
// Bubble Sort for sorting the linked list
void sort() {
    if (head == NULL) {
        printf("List is empty! Cannot sort.\n");
        return;
    }

    node *i, *j;
    int temp;

    // Loop to access each node
    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                // Swap the data of nodes i and j
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }

    printf("List sorted using Bubble Sort!\n");
}

void insertnodeatanypos(int ele, int pos) {
    if (head == NULL && pos == 1) {
        insertnodeinbeg(ele);
    } else if (pos == 1) {
        insertnodeinbeg(ele);
    } else {
        node *newnode = createnode(ele);
        node *temp = head;
        int i = 1;
        while (temp != NULL && i < pos - 1) {
            temp = temp->next;
            i++;
        }
        if (temp == NULL) {
            printf("Invalid position!\n");
        } else {
            newnode->next = temp->next;
            temp->next = newnode;
            printf("Node inserted at position %d!\n", pos);
        }
    }
}

void display() {
    if (head == NULL) {
        printf("List is empty!\n");
    } else {
        printf("Elements in the list: ");
        node *temp = head;
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    printf("------Singly Linked List Operations------\n");
    printf("1. Insert node in beginning\n");
    printf("2. Insert node at end\n");
    printf("3. Insert node at any position\n");
    printf("4. Delete node from beginning\n");
    printf("5. Delete node from end\n");
    printf("6. Delete node from any position\n");
    printf("7. Search element in list\n");
    printf("8. Display elements\n");
    printf("9. Exit\n");

    int choice, value, pos;
    while (1) {
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter Value: ");
                scanf("%d", &value);
                insertnodeinbeg(value);
                break;
            case 2:
                printf("Enter Value: ");
                scanf("%d", &value);
                insertnodeatend(value);
                break;
            case 3:
                printf("Enter Value: ");
                scanf("%d", &value);
                printf("Enter Position: ");
                scanf("%d", &pos);
                insertnodeatanypos(value, pos);
                break;
            case 4:
                deletenodefrombeg();
                break;
            case 5:
                deletenodefromend();
                break;
            case 6:
                printf("Enter Position: ");
                scanf("%d", &pos);
                deletenodefromanypos(pos);
                break;
            case 7:
                printf("Enter element to search: ");
                scanf("%d", &value);
                search(value);
                break;
            case 8:
                display();
                break;
            case 9:
                exit(0);
            default:
                printf("Invalid Choice!\n");
        }
    }
    return 0;
}
